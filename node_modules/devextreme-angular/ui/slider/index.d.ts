/*!
 * devextreme-angular
 * Version: 21.1.4
 * Build date: Mon Jun 21 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import { format } from 'devextreme/ui/widget/ui.widget';
import DxSlider from 'devextreme/ui/slider';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
/**
 * The Slider is a UI component that allows an end user to set a numeric value on a continuous range of possible values.

 */
export declare class DxSliderComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxSlider;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    accessKey: string;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    disabled: boolean;
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    focusStateEnabled: boolean;
    /**
     * Specifies the UI component&apos;s height.
    
     */
    height: number | Function | string;
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * Specifies or indicates whether the editor&apos;s value is valid.
    
     */
    isValid: boolean;
    /**
     * Specifies the step by which a handle moves when a user presses Page Up or Page Down.
    
     */
    keyStep: number;
    /**
     * Configures the labels displayed at the min and max values.
    
     */
    label: {
        format?: format | string;
        position?: string;
        visible?: boolean;
    };
    /**
     * The maximum value the UI component can accept.
    
     */
    max: number;
    /**
     * The minimum value the UI component can accept.
    
     */
    min: number;
    /**
     * 
    
     */
    name: string;
    /**
     * Specifies whether the editor is read-only.
    
     */
    readOnly: boolean;
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    rtlEnabled: boolean;
    /**
     * Specifies whether to highlight the selected range.
    
     */
    showRange: boolean;
    /**
     * Specifies the step by which the UI component&apos;s value changes when a user drags a handler.
    
     */
    step: number;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    tabIndex: number;
    /**
     * Configures a tooltip.
    
     */
    tooltip: {
        enabled?: boolean;
        format?: format | string;
        position?: string;
        showMode?: string;
    };
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
    
     */
    validationError: any;
    /**
     * An array of the validation rules that failed.
    
     */
    validationErrors: Array<any>;
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.
    
     */
    validationMessageMode: string;
    /**
     * Indicates or specifies the current validation status.
    
     */
    validationStatus: string;
    /**
     * The current slider value.
    
     */
    value: number;
    /**
     * Specifies whether the UI component is visible.
    
     */
    visible: boolean;
    /**
     * Specifies the UI component&apos;s width.
    
     */
    width: number | Function | string;
    /**
    
     * A function that is executed when the UI component&apos;s content is ready and each time the content is changed.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed after the UI component&apos;s value is changed.
    
    
     */
    onValueChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyStepChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelChange: EventEmitter<{
        format?: format | string;
        position?: string;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showRangeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stepChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        enabled?: boolean;
        format?: format | string;
        position?: string;
        showMode?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSlider;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
}
export declare class DxSliderModule {
}
